

module AbsGrammar where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = SProgram Stmts
  deriving (Eq, Ord, Show, Read)

data Stmts = StmtsNull | SStmts Stmt Stmts
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Assign Ident Exp
    | ConstAssign Ident Exp
    | If BoolExp BracedStmts
    | IfElse BoolExp BracedStmts BracedStmts
    | For Ident IntExp IntExp BracedStmts
    | While BoolExp BracedStmts
    | Break
    | Continue
    | FuncCall Ident Exp
    | FuncDecl Ident Ident BracedStmts
    | Return Exp
    | Print ParIdent
    | AssignListElem Ident IntExp Exp
    | GetListSize List
    | AppendListElem Ident Exp
    | AssignTuple Ident Tuple
    | SExtract Identifiers Ident
  deriving (Eq, Ord, Show, Read)

data BracedStmts = SBracedStmts Stmts
  deriving (Eq, Ord, Show, Read)

data ParIdent = SParIdent Ident
  deriving (Eq, Ord, Show, Read)

data Literal
    = LiteralStr String
    | LiteralInt Integer
    | LiteralBool Boolean
    | LiteralTuple Tuple
  deriving (Eq, Ord, Show, Read)

data Boolean = BoolTrue | BoolFalse
  deriving (Eq, Ord, Show, Read)

data Exp
    = ExpInt IntExp
    | ExpString StringExp
    | ExpBool BoolExp
    | ExpList List
    | ExpTuple Tuple
    | GetListElem Ident IntExp
  deriving (Eq, Ord, Show, Read)

data IntExp
    = IntAdd IntExp IntExp
    | IntSub IntExp IntExp
    | IntMult IntExp IntExp
    | IntDiv IntExp IntExp
    | IntPare IntExp
    | IntLit Integer
    | IntIdent Ident
  deriving (Eq, Ord, Show, Read)

data BoolExp
    = BoolOr BoolExp BoolExp
    | BoolAnd BoolExp BoolExp
    | BoolNot BoolExp
    | BoolIsSmaller IntExp IntExp
    | BoolSmallerOrEq IntExp IntExp
    | BoolGreater IntExp IntExp
    | BoolGreaterOrEq IntExp IntExp
    | BoolEqual IntExp IntExp
    | BoolEqual2 StringExp StringExp
    | BoolNotEqual IntExp IntExp
    | BoolPare BoolExp
    | BoolIdent Ident
    | BoolLit Boolean
  deriving (Eq, Ord, Show, Read)

data StringExp
    = StringConcat StringExp StringExp
    | StringIdent Ident
    | StringLit String
  deriving (Eq, Ord, Show, Read)

data Literals
    = SLitNull | SLit Literal Literals | SLitSingle Literal
  deriving (Eq, Ord, Show, Read)

data Identifiers
    = SIdentNull | SIdent Ident Identifiers | SIdentSingle Ident
  deriving (Eq, Ord, Show, Read)

data List = SList Literals
  deriving (Eq, Ord, Show, Read)

data Tuple = STuple Literals
  deriving (Eq, Ord, Show, Read)

