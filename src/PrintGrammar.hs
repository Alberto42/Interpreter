{-# LANGUAGE FlexibleInstances, OverlappingInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintGrammar.
--   Generated by the BNF converter.

module PrintGrammar where

import AbsGrammar
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Ident where
  prt _ (Ident i) = doc (showString i)

instance Print Program where
  prt i e = case e of
    SProgram stmts -> prPrec i 0 (concatD [prt 0 stmts])

instance Print Stmts where
  prt i e = case e of
    StmtsNull -> prPrec i 0 (concatD [])
    SStmts stmt stmts -> prPrec i 0 (concatD [prt 0 stmt, prt 0 stmts])

instance Print Stmt where
  prt i e = case e of
    Assign id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 exp])
    ConstAssign id exp -> prPrec i 0 (concatD [doc (showString "final"), prt 0 id, doc (showString "="), prt 0 exp])
    If boolexp bracedstmts -> prPrec i 0 (concatD [doc (showString "if"), prt 0 boolexp, prt 0 bracedstmts])
    IfElse boolexp bracedstmts1 bracedstmts2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 boolexp, prt 0 bracedstmts1, doc (showString "else"), prt 0 bracedstmts2])
    For id intexp1 intexp2 bracedstmts -> prPrec i 0 (concatD [doc (showString "for"), prt 0 id, doc (showString "in"), doc (showString "range"), doc (showString "("), prt 0 intexp1, doc (showString ","), prt 0 intexp2, doc (showString ")"), prt 0 bracedstmts])
    While boolexp bracedstmts -> prPrec i 0 (concatD [doc (showString "while"), prt 0 boolexp, prt 0 bracedstmts])
    Break -> prPrec i 0 (concatD [doc (showString "break")])
    Continue -> prPrec i 0 (concatD [doc (showString "continue")])
    FuncCall id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 exp, doc (showString ")")])
    FuncDecl id1 id2 bracedstmts -> prPrec i 0 (concatD [doc (showString "def"), prt 0 id1, doc (showString "("), prt 0 id2, doc (showString ")"), prt 0 bracedstmts])
    Return exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp])
    Print parident -> prPrec i 0 (concatD [doc (showString "print"), prt 0 parident])
    AssignListElem id intexp exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "["), prt 0 intexp, doc (showString "]"), doc (showString "="), prt 0 exp])
    GetListSize list -> prPrec i 0 (concatD [doc (showString "len"), doc (showString "("), prt 0 list, doc (showString ")")])
    AppendListElem id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString ".append("), prt 0 exp, doc (showString ")")])
    AssignTuple id tuple -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 tuple])
    SExtract identifiers id -> prPrec i 0 (concatD [doc (showString "("), prt 0 identifiers, doc (showString ")"), doc (showString "="), prt 0 id])

instance Print BracedStmts where
  prt i e = case e of
    SBracedStmts stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, doc (showString "}")])

instance Print ParIdent where
  prt i e = case e of
    SParIdent id -> prPrec i 0 (concatD [doc (showString "("), prt 0 id, doc (showString ")")])

instance Print Literal where
  prt i e = case e of
    LiteralStr str -> prPrec i 0 (concatD [prt 0 str])
    LiteralInt n -> prPrec i 0 (concatD [prt 0 n])
    LiteralBool boolean -> prPrec i 0 (concatD [prt 0 boolean])
    LiteralTuple tuple -> prPrec i 0 (concatD [prt 0 tuple])

instance Print Boolean where
  prt i e = case e of
    BoolTrue -> prPrec i 0 (concatD [doc (showString "True")])
    BoolFalse -> prPrec i 0 (concatD [doc (showString "False")])

instance Print Exp where
  prt i e = case e of
    ExpInt intexp -> prPrec i 0 (concatD [prt 0 intexp])
    ExpString stringexp -> prPrec i 0 (concatD [prt 0 stringexp])
    ExpBool boolexp -> prPrec i 0 (concatD [prt 0 boolexp])
    ExpList list -> prPrec i 0 (concatD [prt 0 list])
    ExpTuple tuple -> prPrec i 0 (concatD [prt 0 tuple])
    GetListElem id intexp -> prPrec i 0 (concatD [prt 0 id, doc (showString "["), prt 0 intexp, doc (showString "]")])

instance Print IntExp where
  prt i e = case e of
    IntAdd intexp1 intexp2 -> prPrec i 0 (concatD [prt 0 intexp1, doc (showString "+"), prt 1 intexp2])
    IntSub intexp1 intexp2 -> prPrec i 0 (concatD [prt 0 intexp1, doc (showString "-"), prt 1 intexp2])
    IntMult intexp1 intexp2 -> prPrec i 1 (concatD [prt 1 intexp1, doc (showString "*"), prt 2 intexp2])
    IntDiv intexp1 intexp2 -> prPrec i 1 (concatD [prt 1 intexp1, doc (showString "/"), prt 2 intexp2])
    IntPare intexp -> prPrec i 2 (concatD [doc (showString "("), prt 0 intexp, doc (showString ")")])
    IntLit n -> prPrec i 2 (concatD [prt 0 n])
    IntIdent id -> prPrec i 2 (concatD [prt 0 id])

instance Print BoolExp where
  prt i e = case e of
    BoolOr boolexp1 boolexp2 -> prPrec i 0 (concatD [prt 0 boolexp1, doc (showString "or"), prt 1 boolexp2])
    BoolAnd boolexp1 boolexp2 -> prPrec i 1 (concatD [prt 1 boolexp1, doc (showString "and"), prt 2 boolexp2])
    BoolNot boolexp -> prPrec i 2 (concatD [doc (showString "not"), prt 2 boolexp])
    BoolIsSmaller intexp1 intexp2 -> prPrec i 2 (concatD [prt 0 intexp1, doc (showString "<"), prt 0 intexp2])
    BoolSmallerOrEq intexp1 intexp2 -> prPrec i 2 (concatD [prt 0 intexp1, doc (showString "<="), prt 0 intexp2])
    BoolGreater intexp1 intexp2 -> prPrec i 2 (concatD [prt 0 intexp1, doc (showString ">"), prt 0 intexp2])
    BoolGreaterOrEq intexp1 intexp2 -> prPrec i 2 (concatD [prt 0 intexp1, doc (showString ">="), prt 0 intexp2])
    BoolEqual intexp1 intexp2 -> prPrec i 2 (concatD [prt 0 intexp1, doc (showString "=="), prt 0 intexp2])
    BoolEqual2 stringexp1 stringexp2 -> prPrec i 2 (concatD [prt 0 stringexp1, doc (showString "=="), prt 0 stringexp2])
    BoolNotEqual intexp1 intexp2 -> prPrec i 2 (concatD [prt 0 intexp1, doc (showString "!="), prt 0 intexp2])
    BoolPare boolexp -> prPrec i 2 (concatD [doc (showString "("), prt 0 boolexp, doc (showString ")")])
    BoolIdent id -> prPrec i 2 (concatD [prt 0 id])
    BoolLit boolean -> prPrec i 2 (concatD [prt 0 boolean])

instance Print StringExp where
  prt i e = case e of
    StringConcat stringexp1 stringexp2 -> prPrec i 0 (concatD [prt 0 stringexp1, doc (showString "+"), prt 1 stringexp2])
    StringIdent id -> prPrec i 1 (concatD [prt 0 id])
    StringLit str -> prPrec i 1 (concatD [prt 0 str])

instance Print Literals where
  prt i e = case e of
    SLitNull -> prPrec i 0 (concatD [])
    SLit literal literals -> prPrec i 0 (concatD [prt 0 literal, doc (showString ","), prt 0 literals])
    SLitSingle literal -> prPrec i 0 (concatD [prt 0 literal])

instance Print Identifiers where
  prt i e = case e of
    SIdentNull -> prPrec i 0 (concatD [])
    SIdent id identifiers -> prPrec i 0 (concatD [prt 0 id, doc (showString ","), prt 0 identifiers])
    SIdentSingle id -> prPrec i 0 (concatD [prt 0 id])

instance Print List where
  prt i e = case e of
    SList literals -> prPrec i 0 (concatD [doc (showString "["), prt 0 literals, doc (showString "]")])

instance Print Tuple where
  prt i e = case e of
    STuple literals -> prPrec i 0 (concatD [doc (showString "("), prt 0 literals, doc (showString ")")])

