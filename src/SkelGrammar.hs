module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
import InterpreterMonad
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> InterpreterMonad Value
transProgram x = case x of
  SProgram stmts -> returnError "error"
transStmts :: Stmts -> Result
transStmts x = case x of
  StmtsNull -> failure x
  SStmts stmt stmts -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  Assign ident exp -> failure x
  ConstAssign ident exp -> failure x
  If boolexp bracedstmts -> failure x
  IfElse boolexp bracedstmts1 bracedstmts2 -> failure x
  For ident intexp1 intexp2 bracedstmts -> failure x
  While boolexp bracedstmts -> failure x
  Break -> failure x
  Continue -> failure x
  FuncCall ident exp -> failure x
  FuncDecl ident1 ident2 bracedstmts -> failure x
  Return exp -> failure x
  Print parident -> failure x
  AssignListElem ident intexp exp -> failure x
  GetListSize list -> failure x
  AppendListElem ident exp -> failure x
  AssignTuple ident tuple -> failure x
  SExtract identifiers ident -> failure x
transBracedStmts :: BracedStmts -> Result
transBracedStmts x = case x of
  SBracedStmts stmts -> failure x
transParIdent :: ParIdent -> Result
transParIdent x = case x of
  SParIdent ident -> failure x
transLiteral :: Literal -> Result
transLiteral x = case x of
  LiteralStr string -> failure x
  LiteralInt integer -> failure x
  LiteralBool boolean -> failure x
  LiteralTuple tuple -> failure x
transBoolean :: Boolean -> Result
transBoolean x = case x of
  BoolTrue -> failure x
  BoolFalse -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ExpInt intexp -> failure x
  ExpString stringexp -> failure x
  ExpBool boolexp -> failure x
  ExpList list -> failure x
  ExpTuple tuple -> failure x
  GetListElem ident intexp -> failure x
transIntExp :: IntExp -> Result
transIntExp x = case x of
  IntAdd intexp1 intexp2 -> failure x
  IntSub intexp1 intexp2 -> failure x
  IntMult intexp1 intexp2 -> failure x
  IntDiv intexp1 intexp2 -> failure x
  IntPare intexp -> failure x
  IntLit integer -> failure x
  IntIdent ident -> failure x
transBoolExp :: BoolExp -> Result
transBoolExp x = case x of
  BoolOr boolexp1 boolexp2 -> failure x
  BoolAnd boolexp1 boolexp2 -> failure x
  BoolNot boolexp -> failure x
  BoolIsSmaller intexp1 intexp2 -> failure x
  BoolSmallerOrEq intexp1 intexp2 -> failure x
  BoolGreater intexp1 intexp2 -> failure x
  BoolGreaterOrEq intexp1 intexp2 -> failure x
  BoolEqual intexp1 intexp2 -> failure x
  BoolEqual2 stringexp1 stringexp2 -> failure x
  BoolNotEqual intexp1 intexp2 -> failure x
  BoolPare boolexp -> failure x
  BoolIdent ident -> failure x
  BoolLit boolean -> failure x
transStringExp :: StringExp -> Result
transStringExp x = case x of
  StringConcat stringexp1 stringexp2 -> failure x
  StringIdent ident -> failure x
  StringLit string -> failure x
transLiterals :: Literals -> Result
transLiterals x = case x of
  SLitNull -> failure x
  SLit literal literals -> failure x
  SLitSingle literal -> failure x
transIdentifiers :: Identifiers -> Result
transIdentifiers x = case x of
  SIdentNull -> failure x
  SIdent ident identifiers -> failure x
  SIdentSingle ident -> failure x
transList :: List -> Result
transList x = case x of
  SList literals -> failure x
transTuple :: Tuple -> Result
transTuple x = case x of
  STuple literals -> failure x

