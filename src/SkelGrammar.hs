{-# LANGUAGE RankNTypes #-}
module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
import InterpreterMonad
import qualified Data.Map             as Map
import Utils

transIdent :: Ident -> InterpreterMonad Value
transIdent x = case x of
  Ident string -> returnError "not yet implemented"
transProgram :: Program -> InterpreterMonad Value
transProgram x = case x of
  SProgram stmts -> transStmts stmts
transStmts :: Stmts -> InterpreterMonad Value
transStmts x = case x of
  StmtsNull -> return $ VInt 0
  SStmts stmt stmts -> transStmt stmt >> transStmts stmts
transStmt :: Stmt -> InterpreterMonad Value
transStmt x = case x of
  Assign ident exp -> do
    val <- transExp exp
    InterpreterMonad $ \s -> Right (Null, Map.insert ident val s)

  ConstAssign ident exp -> returnError "not yet implemented"
  If exp bracedstmts -> returnError "not yet implemented"
  IfElse exp bracedstmts1 bracedstmts2 -> returnError "not yet implemented"
  For ident exp1 exp2 bracedstmts -> returnError "not yet implemented"
  While exp bracedstmts -> returnError "not yet implemented"
  Break -> returnError "not yet implemented"
  Continue -> returnError "not yet implemented"
  FuncCall ident exp -> returnError "not yet implemented"
  FuncDecl ident1 ident2 bracedstmts -> returnError "not yet implemented"
  Return exp -> returnError "not yet implemented"
  Print parident -> returnError "not yet implemented"
  AssignListElem ident exp1 exp2 -> returnError "not yet implemented"
  GetListSize list -> returnError "not yet implemented"
  AppendListElem ident exp -> returnError "not yet implemented"
  AssignTuple ident tuple -> returnError "not yet implemented"
  SExtract identifiers ident -> returnError "not yet implemented"
transBracedStmts :: BracedStmts -> InterpreterMonad Value
transBracedStmts x = case x of
  SBracedStmts stmts -> returnError "not yet implemented"
transParIdent :: ParIdent -> InterpreterMonad Value
transParIdent x = case x of
  SParIdent ident -> returnError "not yet implemented"
transLiteral :: Literal -> InterpreterMonad Value
transLiteral x = case x of
  LiteralStr string -> returnError "not yet implemented"
  LiteralInt integer -> returnError "not yet implemented"
  LiteralBool boolean -> returnError "not yet implemented"
  LiteralTuple tuple -> returnError "not yet implemented"
transBoolean :: Boolean -> InterpreterMonad Value
transBoolean x = case x of
  BoolTrue -> returnError "not yet implemented"
  BoolFalse -> returnError "not yet implemented"
transExp :: Exp -> InterpreterMonad Value
transExp x = case x of
  ExpList list -> returnError "not yet implemented"
  ExpTuple tuple -> returnError "not yet implemented"
  BoolOr exp1 exp2 -> returnError "not yet implemented"
  BoolAnd exp1 exp2 -> returnError "not yet implemented"
  BoolNot exp -> returnError "not yet implemented"
  BoolIsSmaller exp1 exp2 -> returnError "not yet implemented"
  BoolSmallerOrEq exp1 exp2 -> returnError "not yet implemented"
  BoolGreater exp1 exp2 -> returnError "not yet implemented"
  BoolGreaterOrEq exp1 exp2 -> returnError "not yet implemented"
  BoolEqual exp1 exp2 -> returnError "not yet implemented"
  BoolNotEqual exp1 exp2 -> returnError "not yet implemented"
  Add exp1 exp2 -> returnError "not yet implemented"
  IntSub exp1 exp2 -> returnError "not yet implemented"
  IntMult exp1 exp2 -> returnError "not yet implemented"
  IntDiv exp1 exp2 -> returnError "not yet implemented"
  Pare exp -> returnError "not yet implemented"
  IntLit integer -> returnError "not yet implemented"
  BoolLit boolean -> returnError "not yet implemented"
  StringLit string -> returnError "not yet implemented"
  IntIdent ident -> returnError "not yet implemented"
  GetListElem ident exp -> returnError "not yet implemented"
transLiterals :: Literals -> InterpreterMonad Value
transLiterals x = case x of
  SLitNull -> returnError "not yet implemented"
  SLit literal literals -> returnError "not yet implemented"
  SLitSingle literal -> returnError "not yet implemented"
transIdentifiers :: Identifiers -> InterpreterMonad Value
transIdentifiers x = case x of
  SIdentNull -> returnError "not yet implemented"
  SIdent ident identifiers -> returnError "not yet implemented"
  SIdentSingle ident -> returnError "not yet implemented"
transList :: List -> InterpreterMonad Value
transList x = case x of
  SList literals -> returnError "not yet implemented"
transTuple :: Tuple -> InterpreterMonad Value
transTuple x = case x of
  STuple literals -> returnError "not yet implemented"


--evalInfixOp :: IntExp -> IntExp -> (forall a. Integral a => a -> a -> a) -> InterpreterMonad Value
--evalInfixOp expr1 expr2 op = do
--  r1 <- transIntExp expr1
--  r2 <- transIntExp expr2
--  case (r1,r2) of
--    (VInt i, VInt i2) -> return $ VInt (op i i2)
--    _ -> returnError "Interpreter expected int values for infix operator"
--
--getVariable :: Ident -> InterpreterMonad Value
--getVariable var = InterpreterMonad $ \s ->
--  let maybeVal = Map.lookup var s in
--  case maybeVal of
--    Just val -> Right (val, s)
--    _ -> Left "Interpreter tried to get value of non-existent variable"